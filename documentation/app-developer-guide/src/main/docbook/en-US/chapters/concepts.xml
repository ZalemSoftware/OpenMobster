<?xml version="1.0" encoding="UTF-8"?>
<chapter id="concepts">
   <chapterinfo>
      <author>
         <firstname>openmobster</firstname>
         <surname>at gmail.com</surname>
         <email>openmobster@gmail.com</email>
      </author>
   </chapterinfo>
   <title>Programming Concepts</title>
   <sect1>
   		<title>Cloud Server</title>
   		<para>
   		 A <emphasis>Cloud Server</emphasis> is the server-side component of the infrastructure that is located in the 'Cloud'. The system provides mobile-oriented
	features like data synchronization, real-time push, and mobile rpc. From an architecture standpoint it sits between the 
	mobile device and the actual cloud data services being mobilized. The Cloud Server provides a Java based Developer API to expose your
	data services. Here are its programming concepts:
   		</para>
   		<sect2>
   			<title>Channel</title>
   			<para>
   			A <emphasis>Channel</emphasis> serves as a gateway for integrating on-device model/data objects with the
 		  server-side backend storage systems such as relational databases, content repositories, or 
          Enterprise systems like CRMs, ERPs etc. It provides a simple CRUD (Create, Read, Update, and Delete)
          interface to expose the backend data. The Channel is specifically designed such that the Developer does
          not have to worry about any low-level state management, synchronization, or other mobile-oriented issues. The idea is to keep
          a Channel a purely <emphasis>data-oriented component</emphasis>.
   			</para>
   		</sect2>
   		<sect2>
   			<title>MobileServiceBean</title>
   			<para>
   			A <emphasis>MobileServiceBean</emphasis> exposes some coarse grained business process to the on-device Mobile App. It provides a very simple
          request/response based synchronous invocation mechanism. It frees up the developer from all low-level  (Remote Procedure Call) 
          concerns like making network connections, security, marshalling/unmarshalling payloads etc.</para>
          <para>
          <emphasis role="bold">Note:</emphasis> This component is quite simple at the time of the
          milestone M1 release. Eventually it will provide more robust REST-based functionality. In any case, the Developer will still be
          shielded from the low-level programming details regardless of what higher-level services will be supported.
   		   </para>
   		</sect2>
   </sect1>
   <sect1>
   		<title>Mobile App Frameworks</title>
   		<sect2>
   			<title>Mobile Data Framework</title>
   			<para>
   			The <emphasis>Mobile Data Framework</emphasis> provides <emphasis>Cloud</emphasis> data-oriented services like data synchronization, real-time push
   			notifications, and simple RPC (Remote Procedure Call) mechanism.
   			</para>
   			<sect3>
   				<title>MobileBean</title>
   				<para>
   				MobileBean is a managed Mobile Component which carries the state of the domain object that it represents on the Cloud. It is
  		    	propagated from the Cloud Server to the mobile device via its corresponding "Channel" on the server. The Mobile Data Framework shields
  		    	the App developer from state management issues like, offline access, receiving push notifications related to state changes on the server,
            	synchronizing locally modified beans back with the server, sync concepts like two-way sync, one-way sync etc. The native runtime smartly
            	tracks the changes to the local state of the MobileBean and decides which type of sync is needed.
   				</para>
   			</sect3>
   			<sect3>
   				<title>MobileService</title>
   				<para>
   				MobileService facilitates making RPC (Remote Procedure Call) invocations from the device to the server side 'MobileServiceBean' components.
   				It presents a simple API to the developer and shields them from low-level networking details, http libraries, REST invocations etc.
   				</para>
   			</sect3>
   		</sect2>
   </sect1>
</chapter>
