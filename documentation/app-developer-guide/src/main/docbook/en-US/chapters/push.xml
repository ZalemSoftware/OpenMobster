<?xml version="1.0" encoding="UTF-8"?>
<chapter id="push">
   <chapterinfo>
      <author>
         <firstname>openmobster</firstname>
         <surname>at gmail.com</surname>
         <email>openmobster@gmail.com</email>
      </author>
   </chapterinfo>
   <title>Push Programming</title>
   <sect1>
   		<title>Sending a Push Notification</title>
   		<para>
   		 You can send a push notification from the cloud using the <emphasis role="bold">Push API</emphasis>. This API is located on the <emphasis role="bold">org.openmobster.cloud.api.push.PushService</emphasis> object.
		 On this object you use the following method 
   		</para>
   		<programlisting>
   		<![CDATA[
   		/**
         * A device agnostic Push method. Push is associated with the user and not his operating system
         * 
         * @param identity user that must receive this message
         * @param appId unique application id this push is associated with
         * @param message message to be sent
         * @param title title of the message
         * @param details any other details associated with the message
         */
        public void push(String identity, String appId, String message, String title, String details)
   		]]>
   		</programlisting>
   </sect1>
   <sect1>
   		<title>Push Setup on an Android App</title>
   		<para>
   		You can setup Push Notification support in your app via two configuration files. Before we go into those details you must understand that there are two types of push notifications. User Initiated Push notification using the <emphasis role="bold">PushService API</emphasis>, and Sync Initiated Push Notification which is generated by the Sync Engine. 
   		</para>
   		<para>
   		<emphasis role="bold">Configuration:</emphasis>AndroidManifest.xml
   		<programlisting>
   		<![CDATA[
   		<receiver android:name="org.openmobster.core.mobileCloud.api.ui.framework.push.PushBroadcastReceiver">
                <intent-filter>
                        <action android:name="org.crud.android.app"/>
                </intent-filter>
        </receiver>
        
        <receiver android:name="org.openmobster.core.mobileCloud.api.ui.framework.push.SyncPushBroadcastReceiver">
                <intent-filter>
                        <action android:name="org.openmobster.sync.push"/>
                </intent-filter>
        </receiver>
   		]]>
   		</programlisting>
   		</para>
   		<para>
   		First you setup the user initiated push notification receiver. In the action value you have to make sure its the same as the name of the unique package that identifies this application. 
   		</para>
   		<para>
   		Next, you will setup sync initiated push notifications. There is no extra configuration to keep in mind here. 
   		</para>
   		<para>
   			<emphasis role="bold">openmobster-app.xml</emphasis>
   			<programlisting>
   			<![CDATA[
   			<push>
                <launch-activity-class>org.openmobster.core.mobileCloud.android_native.framework.App</launch-activity-class>
                <icon-name>push</icon-name>
        	</push>
   			]]>
   			</programlisting>
   		</para>
   		<para>
   			Here, <emphasis role="bold">launch-activity-class</emphasis> indicates the activity that must be launched when the user clicks on the notification from the notification bar
   		</para>
   		<para>
   			<emphasis role="bold">icon-name</emphasis> points to a drawable image that should be displayed as an icon with the notification.
   		</para>
   </sect1>
   <sect1>
   		<title>Push Setup on an iOS App</title>
   		<para>
   		This is a guide to integrate the iPhone <emphasis role="bold">Apple Push Notification (APN)</emphasis> based system with the OpenMobster? Push Service. It consists of several provisioning steps from the Apple side and integration via the Management Console on the OpenMobster? Side. 
   		</para>
   		<sect2>
   			<title>Apple Provisioning</title>
   			<sect3>
   				<title><emphasis role="bold">Step 1</emphasis>: Obtain the Application Certificate</title>
   				<para>
   					In order to push via the APN service, the provider side (OpenMobster?->APN connection) requires a certificate for each App registered for Push Notifications. The best instructions for doing the proper provisioning and obtaining a certificate is explained at : <ulink url="http://mobiforge.com/developing/story/programming-apple-push-notification-services">http://mobiforge.com/developing/story/programming-apple-push-notification-services</ulink>. 
   				</para>
   			</sect3>
   			<sect3>
   				<title><emphasis role="bold">Step 2:</emphasis> Getting an aps_production_identity.p12 certificate</title>
   				<para>Once you have downloaded the aps_production_identity.cer file from the Apple Provisioning Portal </para>
   				<para>
   					<itemizedlist>
   						<listitem>Import the aps_production_identity.cer into the KeyChain?. Double-clicking the file will do it </listitem>
   						<listitem>Select both certificate and private key (associated to the application you wish to use to send notifications) </listitem>
   						<listitem>Right click, and select Export 2 elements, give a name (for example : aps_production_identity.p12) and password (for example : p@ssw0rd) and then export as p12. </listitem>
   					</itemizedlist>
   				</para>
   			</sect3>
   		</sect2>
   		<sect2>
   			<title>OpenMobster Provisioning</title>
   			<itemizedlist>
   				<listitem>
   					<emphasis role="bold">Step 1</emphasis>: Register the App and the Device Token
   					<para>
   						On the OpenMobster? side, Apps that want Push notifications must be registered with the OpenMobster? system. The Device Token is also needed to be registered as it is a requirement for the Apple Push Notification Service. This registration is as follows: 
   						<programlisting>
   						<![CDATA[
   						 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {    
    
    // Override point for customization after application launch.

    // Add the view controller's view to the window and display.
    [self.window addSubview:viewController.view];
    [self.window makeKeyAndVisible];
        
        //Bootstrap the Cloud services
        [self startCloudService];
        
    //This registers the App for Push Notifications
    [[UIApplication sharedApplication] 
         registerForRemoteNotificationTypes:
         (UIRemoteNotificationTypeAlert | 
          UIRemoteNotificationTypeBadge | 
          UIRemoteNotificationTypeSound)];

    return YES;
}
   						]]>
   						</programlisting>
   						If the registation is successful a callback is invoked on the delegate. It goes as follows: 
   						<programlisting>
   						<![CDATA[
   						- (void)application:(UIApplication *)app didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken 
{ 
        NSString *deviceTokenStr = [NSString stringWithFormat:@"%@",deviceToken];
        deviceTokenStr = [StringUtil replaceAll:deviceTokenStr :@"<" :@""];
        deviceTokenStr = [StringUtil replaceAll:deviceTokenStr :@">" :@""];
        
        NSLog(@"DeviceToken: %@",deviceTokenStr);

        @try 
        {
                SubmitDeviceToken *submit = [SubmitDeviceToken withInit];
                [submit submit:deviceTokenStr];
        }
        @catch (SystemException * syse) 
        {
                UIAlertView *dialog = [[UIAlertView alloc] 
                                                           initWithTitle:@"Token Registration Error"
                                                           message:@"Device Token Cloud Registration Failed. Please make sure your device is activated with the Cloud using the ActivationApp. Re-start this App to start the token registration again" 
                                                           delegate:nil 
                                                           cancelButtonTitle:@"OK" otherButtonTitles:nil];
                dialog = [dialog autorelease];
                [dialog show];
        }
}
   						]]>
   						</programlisting>
   						These two operations registers the Application for Push notifications both on the device and on the OpenMobster? Push Service. 
   					</para>
   				</listitem>
   				<listitem>
   					<emphasis role="bold">Step 2:</emphasis> Upload the certificate .p12 file
   					<itemizedlist>
   						<listitem>Login to the Management Console: http://cloud-server-address/console</listitem>
   						<listitem>Select Push Setup</listitem>
   						<listitem>Find the App associated with this certificate</listitem>
   						<listitem>Upload the certificate and supply its password</listitem>
   						<listitem>If successfull, the icon next to the App will turn green</listitem>
   					</itemizedlist>
   				</listitem>
   				<listitem>
   					<emphasis role="bold">Step 3:</emphasis> Send a Test Push
   					<itemizedlist>
   						<listitem>Click on the App</listitem>
   						<listitem>Click the 'Test Push' button</listitem>
   						<listitem>Select the 'Device' where it should be sent</listitem>
   						<listitem>You should receive a Push alert on your phone</listitem>
   					</itemizedlist>
   				</listitem>
   			</itemizedlist>
   		</sect2>
   </sect1>
</chapter>
