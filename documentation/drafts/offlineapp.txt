Title: Offline App Development

A native Mobile App runs within the constraints of its local runtime. A major advantage of this environment is access to local storage for data
associated with the App. If logic is the nervous system of an App, data is its life blood. Without the data, an App is lifeless. Local Storage
brings an App to life instantaneously. The closer this data is stored, the faster and better is the performance of the App.


A typical Mobile App has the following data-oriented requirements

* Data originates in the Cloud
* App related data is synchronized from the Cloud with the local storage over a network connection
* Any new data added via the App is synchronized with the Cloud
* This data is available to the mobile App even in the event the Cloud is unavailable

The OpenMobster Cloud Platform uses a "Channel" on the Cloud side and a "MobileBean" on the device side to provide offline capabilities
to an App

*Simple Tutorial
	
	*Cloud Side: Channel Development
	A Channel serves as a gateway for integrating on-device model/data objects with the
 	server-side backend storage systems such as relational databases, content repositories, or 
    Enterprise systems like CRMs, ERPs etc. It provides a simple CRUD (Create, Read, Update, and Delete)
    interface to expose the backend data. The Channel is specifically designed such that the Developer does
    not have to worry about any low-level state management, and synchronization issues.
    
    Step1: Define a simple MobileBean to represent a data entity being mobilized. This MobileBean should adhere to the MobileBean specification
    covered here. Sample Code:
    import java.util.List;
	import org.openmobster.server.api.model.MobileBean;
	import org.openmobster.server.api.model.MobileBeanId;
	    public class DemoBean implements MobileBean 
	{
		@MobileBeanId
		private String beanId;
		
		private String demoString; //used to demonstrate mobilizing a simple property of type 'String'
		
		private String[] demoArray; //used to demonstrate mobilizing of an indexed property that is an 'array'
		
		private List<String> demoList; //used to demonstrate mobilizing an indexed property that is a 'list'
		
		public DemoBean()
		{
			
		}
	
		public String getBeanId()
		{
			return beanId;
		}
	
		public void setBeanId(String beanId)
		{
			this.beanId = beanId;
		}
	
		public String getDemoString()
		{
			return demoString;
		}
	
		public void setDemoString(String demoString)
		{
			this.demoString = demoString;
		}
	
		public String[] getDemoArray()
		{
			return demoArray;
		}
	
		public void setDemoArray(String[] demoArray)
		{
			this.demoArray = demoArray;
		}
	
		public List<String> getDemoList()
		{
			return demoList;
		}
	
		public void setDemoList(List<String> demoList)
		{
			this.demoList = demoList;
		}
	}

	Step 2: Provide a Channel implementation that exposes this MobileBean via a CRUD interface. 
	Sample Code:
	@ChannelInfo(uri="/offlineapp/demochannel", mobileBeanClass="org.openmobster.core.examples.offlineapp.DemoBean")
	public class DemoChannel implements Channel
	
		* bootup: This method provides a subset of the "MobileBean" instances associated with the said device. 
		They provide just enough information for an App to be functional. This helps with avoiding very long synchronization
		sessions. The other beans are loaded on-demand from there on
		Sample Code:
		public List<? extends MobileBean> bootup() 
		{
			List<MobileBean> list = new ArrayList<MobileBean>();
			
			//Just get only the top 5 beans to bootup the service on device side
			for(int i=0; i<5; i++)
			{
				DemoBean bean = this.demoRepository.getData().get(""+i);
				list.add(bean);
			}
			
			return list;
		}
		
		* readAll: This method provides all the "MobileBean" instances associated with the said device.
		Sample Code:
		public List<? extends MobileBean> readAll() 
		{		
			List<MobileBean> list = new ArrayList<MobileBean>();
			
			//Just get only the top 5 beans to bootup the service on device side
			Set<String> beanIds = this.demoRepository.getData().keySet();
			for(String beanId: beanIds)
			{
				list.add(this.demoRepository.getData().get(beanId));
			}
			
			return list;
		}
		
		* read: This method loads the particular "MobileBean" instance in question.
		Sample Code:
		public MobileBean read(String id) 
		{		
			return this.demoRepository.getData().get(id);
		}
		
		* create: Creates a new instance of a "MobileBean" within the backend data service. This happens when a new instance is created
		on the device and synchronized back with the Cloud. It returns the unique id generated by the server and associated with this bean.
		Sample Code:
		public String create(MobileBean mobileBean) 
		{
			DemoBean newBean = (DemoBean)mobileBean;
			
			//Generate a new unique bean Id. This bean was created on the device side is being
			//synchronized with the backend service
			String newBeanId = String.valueOf(this.getDemoRepository().getData().size());
			newBean.setBeanId(newBeanId);
			
			this.demoRepository.getData().put(newBeanId, newBean);
			
			return newBeanId;
		}
		
		* update: Synchronizes the updated state of a bean from the device with the state on the Cloud.
		Sample Code:
		public void update(MobileBean mobileBean) 
		{
			DemoBean updatedBean = (DemoBean)mobileBean;
			
			this.demoRepository.getData().put(updatedBean.getBeanId(), updatedBean);
		}
		
		* delete: Deletes a bean instance that is user confirmed to be deleted from the device.
		Sample Code:
		public void delete(MobileBean mobileBean) 
		{		
			DemoBean deletedBean = (DemoBean)mobileBean;
			this.demoRepository.getData().remove(deletedBean.getBeanId());
		}
	
	Step3: Provide the META-INF/openmobster-config.xml that will deploy the "Channel" into the Cloud Server.
	Sample Configuration:
	<?xml version="1.0" encoding="UTF-8"?>

	<deployment xmlns="urn:jboss:bean-deployer:2.0">
	   <bean name="/offlineapp/demorepo" class="org.openmobster.core.examples.offlineapp.DemoDataRepository"/>
	    
	   <bean name="/offlineapp/demochannel" class="org.openmobster.core.examples.offlineapp.DemoChannel">
	   		<property name="demoRepository"><inject bean="/offlineapp/demorepo"/></property>
	   </bean>  
	</deployment>
	
	Step4: Package the the above classes and the corresponding META-INF/openmobster-config.xml into a simple Jar file.
	
	Step5: Deploy this jar file into the "deploy" directory of your JBoss AS instance
	
	Putting it all together: Entire Example Channel is located at: 
	
	* Device Side: MobileBean component
	
	On the device side, this data is accessible via the org.openmobster.device.api.model.MobileBean component.
	The device-side MobileBean is a generic component which exposes a Cloud-side MobileBean information through 
	a robust interface. The entire device-side MobileBean component semantic is covered here:
	
	Here are some simple methods to access a MobileBean on the device
	
		* readAll: Returns all MobileBean instances associated with a channel. Chances are some of the instances are only proxies that will be
		loaded seamlessly when they are really needed. This process happens behind the scenes and there is nothing special a programmer needs to do.
		Sample Code:
		
		
		* getValue: Reads the value associated with a field/property of an instance of a bean. A property expression is provided to access
		this information
		Sample Code:
		
		* setValue: Updates the field/property of an instance of a bean. A property expression and its value are provided
		
   For a more detailed coverage of the MobileBean usage, please see some example code located at: